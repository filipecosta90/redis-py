name: Benchmarks

on:
  pull_request:
    types: [synchronize, opened, reopened, labeled]

jobs:
  benchmark:
    if: ${{ contains(github.event.*.labels.*.name, 'action:run-benchmark') }}
    runs-on: ubuntu-latest
    env:
      EC2_PRIVATE_PEM: ${{ secrets.PERFORMANCE_EC2_PRIVATE_PEM }}
      AWS_ACCESS_KEY_ID: ${{ secrets.PERFORMANCE_EC2_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.PERFORMANCE_EC2_SECRET_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.PERFORMANCE_EC2_REGION }}
    steps:
     - uses: actions/checkout@v2
     - name: install python
       uses: actions/setup-python@v3
       with:
         python-version: '3.10'
         cache: 'pip'
     - name: install benchmark requirements
       run: |
         pip install -r benchmarks/benchmark_requirements.txt
     - name: install package from commit
       run: |
        pip install --quiet git+${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}.git@${GITHUB_SHA}
     - name: Deploy steady stable benchmark VMs
       id: deploy
       run: |
        redisbench-admin deploy \
         --inventory_git https://github.com/RedisLabsModules/testing-infrastructure/tree/master/terraform/oss-standalone-redis-small \
         --set_env_vars_json "/tmp/deploy-env.json" \
         --inventory_local_dir /tmp/inventory
        CLIENT_PUBLIC_IP=$(cat /tmp/deploy-env.json | jq '.CLIENT_PUBLIC_IP')
        CLIENT_PRIVATE_IP=$(cat /tmp/deploy-env.json | jq '.CLIENT_PRIVATE_IP')
        SERVER_PUBLIC_IP=$(cat /tmp/deploy-env.json | jq '.SERVER_PUBLIC_IP')
        SERVER_PRIVATE_IP=$(cat /tmp/deploy-env.json | jq '.SERVER_PRIVATE_IP')
        echo "::set-output name=CLIENT_PUBLIC_IP::$CLIENT_PUBLIC_IP"
        echo "::set-output name=CLIENT_PRIVATE_IP::$CLIENT_PRIVATE_IP"
        echo "::set-output name=SERVER_PUBLIC_IP::$SERVER_PUBLIC_IP"
        echo "::set-output name=SERVER_PRIVATE_IP::$SERVER_PRIVATE_IP"

     - name: Client logic
       run: |
            echo "CLIENT_PUBLIC_IP: ${{steps.deploy.outputs.CLIENT_PUBLIC_IP}}"
            echo "CLIENT_PRIVATE_IP: ${{steps.deploy.outputs.CLIENT_PRIVATE_IP}}"
            echo "SERVER_PUBLIC_IP: ${{steps.deploy.outputs.SERVER_PUBLIC_IP}}"
            echo "SERVER_PRIVATE_IP: ${{steps.deploy.outputs.SERVER_PRIVATE_IP}}"

     - name: Configure SSH
       env:
         SSH_USER: "ubuntu"
         SSH_KEY_NAME: ${{ secrets.PERFORMANCE_EC2_PRIVATE_PEM_NAME }}
         CLIENT_PUBLIC_IP: ${{steps.deploy.outputs.CLIENT_PUBLIC_IP}}
         SERVER_PUBLIC_IP: ${{steps.deploy.outputs.SERVER_PUBLIC_IP}}
         SERVER_PRIVATE_IP: ${{steps.deploy.outputs.SERVER_PRIVATE_IP}}
       run: |
          mkdir -p ~/.ssh/
          chmod 600 $SSH_KEY_NAME
          cat >>~/.ssh/config <<END
          Host db
            HostName $SERVER_PUBLIC_IP
            User $SSH_USER
            IdentityFile $SSH_KEY_NAME
            StrictHostKeyChecking no
          Host client
            HostName $CLIENT_PUBLIC_IP
            User $SSH_USER
            IdentityFile $SSH_KEY_NAME
            StrictHostKeyChecking no
          END
       

     - name: Install redis on remote DB VM
       env:
         REDIS_PASS: ${{ secrets.PERFORMANCE_EC2_DB_PASSWORD }}
       run: |
          ssh db 'curl -fsSL https://packages.redis.io/gpg | sudo gpg --dearmor -o /usr/share/keyrings/redis-archive-keyring.gpg'
          ssh db 'echo "deb [signed-by=/usr/share/keyrings/redis-archive-keyring.gpg] https://packages.redis.io/deb $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/redis.list'
          ssh db 'sudo apt-get update'
          ssh db 'sudo apt-get install redis -y'
          # for more advanced config requirements alter /etc/redis/redis.conf
          ssh db 'redis-cli config set protected-mode no'
          ssh db "redis-cli config set requirepass $REDIS_PASS"
          ssh db "redis-cli config set bind $SERVER_PRIVATE_IP"

     - name: Copy project content to remote CLIENT VM and setup benchmark
       env:
         REDIS_PASS: ${{ secrets.PERFORMANCE_EC2_DB_PASSWORD }}
         REMOTE_PATH: /home/ubuntu/redis-py/
         SERVER_PRIVATE_IP: ${{steps.deploy.outputs.SERVER_PRIVATE_IP}}
       run: |
          ssh client 'sudo apt-get update'
          ssh client 'sudo apt-get install python3-pip -y'
          ssh client 'sudo python3 -m pip install --upgrade pip'
          scp -r `pwd` client:$REMOTE_PATH
          ssh client "pip3 install $REMOTE_PATH"
          ssh client "pip3 install -r $REMOTE_PATH/benchmarks/benchmark_requirements.txt"

     - name: Run micro-benchmarks
       env:
         REDIS_PASS: ${{ secrets.PERFORMANCE_EC2_DB_PASSWORD }}
         REMOTE_PATH: /home/ubuntu/redis-py/
         SERVER_PRIVATE_IP: ${{steps.deploy.outputs.SERVER_PRIVATE_IP}}
       run: |
          ssh client "PASS=$REDIS_PASS HOST=$SERVER_PRIVATE_IP PORT=6379 python3 $REMOTE_PATH/benchmarks/benchmark_connection.py --output $REMOTE_PATH/output.json --inherit-environ PORT,HOST,PASS"
          sftp client:$REMOTE_PATH/output.json

     - name: destroy_vms
       run: |
        redisbench-admin deploy \
         --inventory_git https://github.com/RedisLabsModules/testing-infrastructure/tree/master/terraform/oss-standalone-redis-small \
         --set_env_vars_json "deploy-env.json" \
         --inventory_local_dir /tmp/inventory \
         --destroy
